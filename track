Installation
composer require livewire/livewire
Create a component
php artisan make:livewire hello-word
this will create to files
- App\Livewire\HelloWord and resources/views/livewire/hello-word.blade.php
<button wire:click="$refresh">Refresh</button> 
this button refresh magicaly the component on a click

About properties, on a htlm input add wire-model="myvar" to dymicaly render this method

after some action do in your component php file, $this->reset('myvar'); to reset it into its first value
on your blade component, you can call any public function of your php component in a wire-event like click, mouseleave etc
 wire:model.live.debounce.1000ms='todo' this one sync values each 1s interval when you interact with (wire:click)

Lifecycle hooks
the mount function in the component php file is called every time the component is mounted. It can be used to setup the application

Page component 
make a livewire layout page with php artisan livewire:layout
your components will be rendered in the $slot
@class(['current' => request()->is('counter')] to add class attribute with value 'current' if request name is counter
render directement a component from route web.php

Testing
to generate a test file for the CreatePost component
$php artisan make:livewire create-post --test
vendor/bin/phpunit tests/Feature/Livewire/CreatePostTest.php  to test the file generated
pour simuler un erreur de test on peut appeler abort(404) dans une fonction mount dans le component 
preceder chaque fonction de test avec le decorateur @test, et on pourrait le faire avec un browser test afin de simuler 
le javascript dans les vues